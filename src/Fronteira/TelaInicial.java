/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fronteira;

import Modelo.Cromossomo;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import static java.util.EnumSet.range;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.TickUnits;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.util.ShapeUtilities;

/**
 *
 * @author guirodrpc
 */
public class TelaInicial extends javax.swing.JFrame {

    /**
     * Creates new form TelaInicial
     */
    public TelaInicial() {
        try {
            icone();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    ArrayList<Cromossomo> cromossomos;
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblEquacao = new javax.swing.JLabel();
        pnGraficoPontos = new javax.swing.JPanel();
        pnInicio = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblNomes = new javax.swing.JLabel();
        pnEquacao = new javax.swing.JPanel();
        pnCaracteristicas = new javax.swing.JPanel();
        lblPopulacao = new javax.swing.JLabel();
        txtPopulacao = new javax.swing.JTextField();
        lblGeracoes = new javax.swing.JLabel();
        txtGeracoes = new javax.swing.JTextField();
        lblMutacao = new javax.swing.JLabel();
        txtMutacao = new javax.swing.JTextField();
        bttIniciar = new javax.swing.JButton();
        lblCrossover = new javax.swing.JLabel();
        txtCrossover = new javax.swing.JTextField();
        chbElitismo = new javax.swing.JCheckBox();
        lblResultado = new javax.swing.JLabel();
        txtResultado = new javax.swing.JTextField();
        pnInicial = new javax.swing.JTabbedPane();
        pnCromossomos = new javax.swing.JPanel();
        scrCromossomos = new javax.swing.JScrollPane();
        tblCromossomos = new javax.swing.JTable();
        pnGrafico = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnMaisAptos = new javax.swing.JPanel();
        scrMaisAptos = new javax.swing.JScrollPane();
        tblMaisAptos = new javax.swing.JTable();
        pnGraficoMaisAptos = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        lblEquacao.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEquacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/equacao.png"))); // NOI18N
        lblEquacao.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        pnGraficoPontos.setBackground(new java.awt.Color(250, 250, 250));
        pnGraficoPontos.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnGraficoPontosLayout = new javax.swing.GroupLayout(pnGraficoPontos);
        pnGraficoPontos.setLayout(pnGraficoPontosLayout);
        pnGraficoPontosLayout.setHorizontalGroup(
            pnGraficoPontosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );
        pnGraficoPontosLayout.setVerticalGroup(
            pnGraficoPontosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UFLA - Inteligência Artificial");
        setBackground(new java.awt.Color(242, 242, 242));
        setExtendedState(MAXIMIZED_BOTH);
        setPreferredSize(new java.awt.Dimension(800, 600));

        pnInicio.setBackground(new java.awt.Color(250, 250, 250));

        lblTitulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Cabecalho2.png"))); // NOI18N

        lblNomes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Nomes.png"))); // NOI18N

        pnEquacao.setBackground(new java.awt.Color(250, 250, 250));

        pnCaracteristicas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Características", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(51, 51, 51))); // NOI18N
        pnCaracteristicas.setOpaque(false);

        lblPopulacao.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblPopulacao.setText("População Inicial:");

        txtPopulacao.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtPopulacao.setText("30");
        txtPopulacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPopulacaoActionPerformed(evt);
            }
        });

        lblGeracoes.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblGeracoes.setText("Número de Gerações:");

        txtGeracoes.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtGeracoes.setText("200");
        txtGeracoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGeracoesActionPerformed(evt);
            }
        });

        lblMutacao.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblMutacao.setText("% Mutação:");

        txtMutacao.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtMutacao.setText("1");
        txtMutacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMutacaoActionPerformed(evt);
            }
        });

        bttIniciar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bttIniciar.setForeground(new java.awt.Color(51, 51, 51));
        bttIniciar.setText("Iniciar");
        bttIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttIniciarActionPerformed(evt);
            }
        });

        lblCrossover.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblCrossover.setText("% Crossover:");

        txtCrossover.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtCrossover.setText("70");
        txtCrossover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCrossoverActionPerformed(evt);
            }
        });

        chbElitismo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        chbElitismo.setText("Elitismo");
        chbElitismo.setOpaque(false);
        chbElitismo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbElitismoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnCaracteristicasLayout = new javax.swing.GroupLayout(pnCaracteristicas);
        pnCaracteristicas.setLayout(pnCaracteristicasLayout);
        pnCaracteristicasLayout.setHorizontalGroup(
            pnCaracteristicasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCaracteristicasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPopulacao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPopulacao, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblGeracoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGeracoes, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMutacao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCrossover)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCrossover, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chbElitismo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bttIniciar)
                .addContainerGap())
        );
        pnCaracteristicasLayout.setVerticalGroup(
            pnCaracteristicasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCaracteristicasLayout.createSequentialGroup()
                .addGroup(pnCaracteristicasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPopulacao)
                    .addComponent(txtPopulacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGeracoes)
                    .addComponent(txtGeracoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMutacao)
                    .addComponent(txtMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bttIniciar)
                    .addComponent(lblCrossover)
                    .addComponent(txtCrossover, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbElitismo))
                .addGap(7, 7, 7))
        );

        lblResultado.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblResultado.setForeground(new java.awt.Color(51, 51, 51));
        lblResultado.setText("Melhor Elemento: ");

        txtResultado.setEditable(false);
        txtResultado.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtResultado.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResultadoActionPerformed(evt);
            }
        });

        pnInicial.setBackground(new java.awt.Color(250, 250, 250));
        pnInicial.setForeground(new java.awt.Color(100, 100, 100));
        pnInicial.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N

        pnCromossomos.setBackground(new java.awt.Color(250, 250, 250));
        pnCromossomos.setPreferredSize(new java.awt.Dimension(728, 343));

        scrCromossomos.setPreferredSize(new java.awt.Dimension(340, 402));
        scrCromossomos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scrCromossomosMouseClicked(evt);
            }
        });

        tblCromossomos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblCromossomos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Geração", "ID", "Binário", "x", "f(x)", "Aptidão"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCromossomos.setColumnSelectionAllowed(true);
        tblCromossomos.getTableHeader().setReorderingAllowed(false);
        tblCromossomos.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                //A coluna do status é 3
                Object ref = table.getValueAt(row, 0);//Coluna Status
                Integer nm = Integer.parseInt(ref.toString());
                //Coloca cor em todas as linhas,COLUNA(3) que tem o valor "Aberto"
                if ((ref != null) && (nm % 2 == 0)) {//Se Status for igual a "Aberto"
                    setBackground(new Color(208, 216, 232));//Preenche a linha de branco
                    setForeground(new Color(51, 51, 51));//E a fonte de preto
                }else if((ref != null) && (nm % 2 != 0)){
                    setBackground(new Color(233, 237, 244));//Preenche a linha de branco
                    setForeground(new Color(51, 51, 51));//E a fonte de preto
                }else {
                    boolean sel = isSelected;
                    if (sel == true) {
                        setBackground(getBackground());
                        setForeground(getForeground());
                    } else {//Se Status não for "Aberto"
                        setBackground(Color.WHITE);//Preenche a linha de branco
                        setForeground(new Color(51, 51, 51));//E a fonte de preto
                    }
                }
                return this;
            }
        });
        tblCromossomos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCromossomosMouseClicked(evt);
            }
        });
        scrCromossomos.setViewportView(tblCromossomos);
        tblCromossomos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (tblCromossomos.getColumnModel().getColumnCount() > 0) {
            tblCromossomos.getColumnModel().getColumn(0).setMinWidth(50);
            tblCromossomos.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblCromossomos.getColumnModel().getColumn(1).setMinWidth(50);
            tblCromossomos.getColumnModel().getColumn(1).setPreferredWidth(50);
            tblCromossomos.getColumnModel().getColumn(2).setMinWidth(100);
            tblCromossomos.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblCromossomos.getColumnModel().getColumn(3).setMinWidth(40);
            tblCromossomos.getColumnModel().getColumn(3).setPreferredWidth(40);
            tblCromossomos.getColumnModel().getColumn(4).setMinWidth(45);
            tblCromossomos.getColumnModel().getColumn(4).setPreferredWidth(45);
            tblCromossomos.getColumnModel().getColumn(5).setMinWidth(45);
            tblCromossomos.getColumnModel().getColumn(5).setPreferredWidth(45);
        }

        pnGrafico.setBackground(new java.awt.Color(250, 250, 250));
        pnGrafico.setVerifyInputWhenFocusTarget(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/grafico.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pnGraficoLayout = new javax.swing.GroupLayout(pnGrafico);
        pnGrafico.setLayout(pnGraficoLayout);
        pnGraficoLayout.setHorizontalGroup(
            pnGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
        );
        pnGraficoLayout.setVerticalGroup(
            pnGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnCromossomosLayout = new javax.swing.GroupLayout(pnCromossomos);
        pnCromossomos.setLayout(pnCromossomosLayout);
        pnCromossomosLayout.setHorizontalGroup(
            pnCromossomosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCromossomosLayout.createSequentialGroup()
                .addComponent(scrCromossomos, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnCromossomosLayout.setVerticalGroup(
            pnCromossomosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrCromossomos, javax.swing.GroupLayout.DEFAULT_SIZE, 1033, Short.MAX_VALUE)
            .addComponent(pnGrafico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnInicial.addTab("Cromossomos", new javax.swing.ImageIcon(getClass().getResource("/Imagens/cromossomo_2.png")), pnCromossomos); // NOI18N

        pnMaisAptos.setBackground(new java.awt.Color(250, 250, 250));
        pnMaisAptos.setPreferredSize(new java.awt.Dimension(728, 343));

        scrMaisAptos.setBackground(new java.awt.Color(250, 250, 250));

        tblMaisAptos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblMaisAptos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Geração", "ID", "Binário", "x", "f(x)", "Aptidão"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMaisAptos.setColumnSelectionAllowed(true);
        tblMaisAptos.getTableHeader().setReorderingAllowed(false);
        tblMaisAptos.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                //A coluna do status é 3
                Object ref = table.getValueAt(row, 0);//Coluna Status
                Integer nm = Integer.parseInt(ref.toString());
                //Coloca cor em todas as linhas,COLUNA(3) que tem o valor "Aberto"
                if ((ref != null) && (nm % 2 == 0)) {//Se Status for igual a "Aberto"
                    setBackground(new Color(208, 216, 232));//Preenche a linha de branco
                    setForeground(new Color(51, 51, 51));//E a fonte de preto
                }else if((ref != null) && (nm % 2 != 0)){
                    setBackground(new Color(233, 237, 244));//Preenche a linha de branco
                    setForeground(new Color(51, 51, 51));//E a fonte de preto
                }else {
                    boolean sel = isSelected;
                    if (sel == true) {
                        setBackground(getBackground());
                        setForeground(getForeground());
                    } else {//Se Status não for "Aberto"
                        setBackground(Color.WHITE);//Preenche a linha de branco
                        setForeground(new Color(51, 51, 51));//E a fonte de preto
                    }
                }
                return this;
            }
        });
        scrMaisAptos.setViewportView(tblMaisAptos);
        tblMaisAptos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblMaisAptos.getColumnModel().getColumnCount() > 0) {
            tblMaisAptos.getColumnModel().getColumn(0).setMinWidth(50);
            tblMaisAptos.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblMaisAptos.getColumnModel().getColumn(1).setMinWidth(50);
            tblMaisAptos.getColumnModel().getColumn(1).setPreferredWidth(50);
            tblMaisAptos.getColumnModel().getColumn(2).setMinWidth(100);
            tblMaisAptos.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblMaisAptos.getColumnModel().getColumn(3).setMinWidth(40);
            tblMaisAptos.getColumnModel().getColumn(3).setPreferredWidth(40);
            tblMaisAptos.getColumnModel().getColumn(4).setMinWidth(45);
            tblMaisAptos.getColumnModel().getColumn(4).setPreferredWidth(45);
            tblMaisAptos.getColumnModel().getColumn(5).setMinWidth(45);
            tblMaisAptos.getColumnModel().getColumn(5).setPreferredWidth(45);
        }

        pnGraficoMaisAptos.setBackground(new java.awt.Color(250, 250, 250));
        pnGraficoMaisAptos.setVerifyInputWhenFocusTarget(false);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/grafico.png"))); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pnGraficoMaisAptosLayout = new javax.swing.GroupLayout(pnGraficoMaisAptos);
        pnGraficoMaisAptos.setLayout(pnGraficoMaisAptosLayout);
        pnGraficoMaisAptosLayout.setHorizontalGroup(
            pnGraficoMaisAptosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
        );
        pnGraficoMaisAptosLayout.setVerticalGroup(
            pnGraficoMaisAptosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnMaisAptosLayout = new javax.swing.GroupLayout(pnMaisAptos);
        pnMaisAptos.setLayout(pnMaisAptosLayout);
        pnMaisAptosLayout.setHorizontalGroup(
            pnMaisAptosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMaisAptosLayout.createSequentialGroup()
                .addComponent(scrMaisAptos, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnGraficoMaisAptos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnMaisAptosLayout.setVerticalGroup(
            pnMaisAptosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrMaisAptos, javax.swing.GroupLayout.DEFAULT_SIZE, 1033, Short.MAX_VALUE)
            .addComponent(pnGraficoMaisAptos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnInicial.addTab("Mais Aptos ", new javax.swing.ImageIcon(getClass().getResource("/Imagens/trofeu_2.png")), pnMaisAptos); // NOI18N

        javax.swing.GroupLayout pnEquacaoLayout = new javax.swing.GroupLayout(pnEquacao);
        pnEquacao.setLayout(pnEquacaoLayout);
        pnEquacaoLayout.setHorizontalGroup(
            pnEquacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEquacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnEquacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnInicial)
                    .addComponent(pnCaracteristicas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnEquacaoLayout.createSequentialGroup()
                        .addComponent(lblResultado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtResultado)))
                .addContainerGap())
        );
        pnEquacaoLayout.setVerticalGroup(
            pnEquacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEquacaoLayout.createSequentialGroup()
                .addComponent(pnCaracteristicas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 1069, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnEquacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtResultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblResultado))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnInicioLayout = new javax.swing.GroupLayout(pnInicio);
        pnInicio.setLayout(pnInicioLayout);
        pnInicioLayout.setHorizontalGroup(
            pnInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnInicioLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblNomes)
                .addGap(8, 8, 8))
            .addComponent(pnEquacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnInicioLayout.setVerticalGroup(
            pnInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnInicioLayout.createSequentialGroup()
                .addGroup(pnInicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnInicioLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblNomes, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnEquacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPopulacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPopulacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPopulacaoActionPerformed

    private void txtGeracoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGeracoesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGeracoesActionPerformed

    private void txtMutacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMutacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMutacaoActionPerformed

    private void txtCrossoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCrossoverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCrossoverActionPerformed

    private void chbElitismoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbElitismoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chbElitismoActionPerformed

    private void txtResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResultadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResultadoActionPerformed

    private void bttIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttIniciarActionPerformed
        int populacao = Integer.parseInt(txtPopulacao.getText());
        if (populacao > 0 && populacao % 2 == 0) {
            cromossomos = new ArrayList<>();
            limparTabela(tblCromossomos);
            limparTabela(tblMaisAptos);
            int geracao = Integer.parseInt(txtGeracoes.getText());
            int taxaDeCrossover = Integer.parseInt(txtCrossover.getText());
            int taxaDeMutacao = Integer.parseInt(txtMutacao.getText());
            boolean elitismo = chbElitismo.isSelected();
            Cromossomo cromossomo = new Cromossomo();
            cromossomos = cromossomo.populacaoInicial(cromossomos, populacao);
            cromossomos = cromossomo.reproducao(cromossomos, populacao, geracao, taxaDeCrossover, taxaDeMutacao, elitismo);
            imprimirTabela(cromossomos, populacao);
            imprimirMaisAptos(cromossomos, populacao);
            String x, y;

            x = (String) tblMaisAptos.getValueAt(tblMaisAptos.getRowCount() - 1, 3);
            y = (String) tblMaisAptos.getValueAt(tblMaisAptos.getRowCount() - 1, 4);
            try {
                gerarGrafico(x, y);
                gerarGraficoMaisAptos(x, geracao);
            } catch (IOException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "A reprodução foi finalizada. ", "Sucesso", 1);
        } else {
            JOptionPane.showMessageDialog(null, "A população inicial deve ser um número par maior que 0. ", "Erro", 2);
        }
    }//GEN-LAST:event_bttIniciarActionPerformed

    private void scrCromossomosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrCromossomosMouseClicked

    }//GEN-LAST:event_scrCromossomosMouseClicked

    private void tblCromossomosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCromossomosMouseClicked

        if (evt.getClickCount() == 2) {
            Cromossomo pai1 = new Cromossomo(), pai2 = new Cromossomo();
            int i = tblCromossomos.getSelectedRow();
            int geracao, id;
            geracao = Integer.parseInt(tblCromossomos.getValueAt(i, 0).toString());
            id = Integer.parseInt(tblCromossomos.getValueAt(i, 1).toString());
            int j = pai1.encontrarEnderecoPai(geracao, id, Integer.parseInt(txtPopulacao.getText()));
            int jPai1 = -1, jPai2 = -1;
            String binario = cromossomos.get(j).getBinario();
            int pontoDeCorte = cromossomos.get(j).getPontoDeCorte();
            int pontoDeMutacao = cromossomos.get(j).getPontoDeMutacao();
            if (geracao != 1) {
                jPai1 = pai1.encontrarEnderecoPai(cromossomos.get(j).getGeracaoPai1(), cromossomos.get(j).getCromossomoPai1(), Integer.parseInt(txtPopulacao.getText()));
                jPai2 = pai2.encontrarEnderecoPai(cromossomos.get(j).getGeracaoPai2(), cromossomos.get(j).getCromossomoPai2(), Integer.parseInt(txtPopulacao.getText()));
                pai1 = cromossomos.get(jPai1);
                pai2 = cromossomos.get(jPai2);

                String crossover = "Não teve.";
                String mutacao = "Não teve.";
                if (pontoDeCorte > 0) {
                    crossover = "Ponto de Corte = " + String.valueOf(pontoDeCorte);
                }
                if (pontoDeMutacao > 0) {
                    mutacao = "Ponto de Mutacao = " + String.valueOf(pontoDeMutacao);
                }

                JOptionPane.showMessageDialog(null, "Pai 1: " + pai1.getBinario()
                        + "\nPai 2: " + pai2.getBinario()
                        + "\n"
                        + "Crossover: " + crossover
                        + "\n Mutação: " + mutacao, "Cromossomo: " + binario, 1);

            } else {
                JOptionPane.showMessageDialog(null, "Pai 1: Não tem."
                        + "\nPai 2: Não tem." + "\n"
                        + "Crossover: Não teve."
                        + "\n Mutação: Não teve.", "Cromossomo: " + binario, 1);
            }

        }


    }//GEN-LAST:event_tblCromossomosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaInicial().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttIniciar;
    private javax.swing.JCheckBox chbElitismo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblCrossover;
    private javax.swing.JLabel lblEquacao;
    private javax.swing.JLabel lblGeracoes;
    private javax.swing.JLabel lblMutacao;
    private javax.swing.JLabel lblNomes;
    private javax.swing.JLabel lblPopulacao;
    private javax.swing.JLabel lblResultado;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnCaracteristicas;
    private javax.swing.JPanel pnCromossomos;
    private javax.swing.JPanel pnEquacao;
    private javax.swing.JPanel pnGrafico;
    private javax.swing.JPanel pnGraficoMaisAptos;
    private javax.swing.JPanel pnGraficoPontos;
    private javax.swing.JTabbedPane pnInicial;
    private javax.swing.JPanel pnInicio;
    private javax.swing.JPanel pnMaisAptos;
    private javax.swing.JScrollPane scrCromossomos;
    private javax.swing.JScrollPane scrMaisAptos;
    private javax.swing.JTable tblCromossomos;
    private javax.swing.JTable tblMaisAptos;
    private javax.swing.JTextField txtCrossover;
    private javax.swing.JTextField txtGeracoes;
    private javax.swing.JTextField txtMutacao;
    private javax.swing.JTextField txtPopulacao;
    private javax.swing.JTextField txtResultado;
    // End of variables declaration//GEN-END:variables

    public void icone() throws ClassNotFoundException {
        try {
            URL url = this.getClass().getResource("/imagens/icone.png");
            Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
            this.setIconImage(imagemTitulo);
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (InstantiationException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void imprimirTabela(ArrayList<Cromossomo> cromossomos, int populacao) {
        String[] linha = new String[6];
        DefaultTableModel model = (DefaultTableModel) tblCromossomos.getModel();
        Cromossomo cromossomo = new Cromossomo();
        for (int k = 0; k < cromossomos.size(); k = k + populacao) {
            for (int i = k; i < k + populacao; i++) {
                linha[0] = String.valueOf(cromossomos.get(i).getGeracao());
                linha[1] = String.valueOf(cromossomos.get(i).getId());
                linha[2] = String.valueOf(cromossomos.get(i).getBinario());
                linha[3] = String.valueOf(cromossomos.get(i).getX());
                linha[4] = String.valueOf(cromossomos.get(i).getY());
                linha[5] = String.valueOf(cromossomos.get(i).getProb() + "%");
                model.addRow(linha);
            }
            int m = cromossomo.maisApto(cromossomos, k, populacao);
            //model.setValueAt(String.valueOf("<html><b>" + cromossomos.get(m).getId() + "</b></html>"), m, 1);
            model.setValueAt(String.valueOf("<html><b>" + cromossomos.get(m).getBinario() + "</b></html>"), m, 2);
            model.setValueAt(String.valueOf("<html><b>" + cromossomos.get(m).getX() + "</b></html>"), m, 3);
            model.setValueAt(String.valueOf("<html><b>" + cromossomos.get(m).getY() + "</b></html>"), m, 4);
            model.setValueAt(String.valueOf("<html><b>" + cromossomos.get(m).getProb() + "%</b></html>"), m, 5);
            txtResultado.setText("Cromossomo " + cromossomos.get(m).getId() + ":    x = " + cromossomos.get(m).getX() + "    -    f(x) = " + cromossomos.get(m).getY() + "    -    Aptidão: " + cromossomos.get(m).getProb() + "%");
        }

    }

    public void imprimirMaisAptos(ArrayList<Cromossomo> cromossomos, int populacao) {
        String[] linha = new String[6];
        DefaultTableModel model = (DefaultTableModel) tblMaisAptos.getModel();
        Cromossomo cromossomo = new Cromossomo();
        for (int k = 0; k < cromossomos.size(); k = k + populacao) {
            int m = cromossomo.maisApto(cromossomos, k, populacao);

            linha[0] = String.valueOf(cromossomos.get(m).getGeracao());
            linha[1] = String.valueOf(cromossomos.get(m).getId());
            linha[2] = String.valueOf(cromossomos.get(m).getBinario());
            linha[3] = String.valueOf(cromossomos.get(m).getX());
            linha[4] = String.valueOf(cromossomos.get(m).getY());
            linha[5] = String.valueOf(cromossomos.get(m).getProb());
            model.addRow(linha);

        }

    }

    public void limparTabela(JTable tabela) {
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        model.setRowCount(0);
        tabela.setModel(model);
    }

    public void gerarGrafico(String x, String y) throws IOException {
        // cria o conjunto de dados
        XYSeries pontos = new XYSeries("Pontos");

        for (Cromossomo filho : cromossomos) {
            pontos.add(filho.getX(), filho.getY());
        }
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(pontos);

        JFreeChart grafico = ChartFactory.createXYLineChart(
                "Gráfico da Função", // Título
                null, // Etiqueta Coordenada X
                null, // Etiqueta Coordenada Y
                dataset, // Datos
                PlotOrientation.VERTICAL,
                false, // Muestra la leyenda de los productos (Producto A)
                false,
                false
        );

        ChartPanel myChartPanel = new ChartPanel(grafico, true); //criei o painel de grafico colocando meu grafico previamente gerado
        myChartPanel.setSize(pnGrafico.getWidth(), pnGrafico.getHeight()); //setei o tamanho do grafico conforme o painel que usarei
        myChartPanel.setVisible(true);

        IntervalMarker intervalo = new IntervalMarker(-10.0, 10.0, new Color(208, 216, 232));
        final XYPlot plot = grafico.getXYPlot();
        plot.setBackgroundPaint(new Color(250, 250, 250));
        plot.setRangeGridlinePaint(new Color(100, 100, 100));
        plot.setDomainGridlinePaint(new Color(100, 100, 100));
        plot.setDomainMinorGridlinesVisible(true);
        XYPointerAnnotation anotacao;
        anotacao = new XYPointerAnnotation("(" + x + " , " + y + ")", Double.parseDouble(x), Double.parseDouble(y), 270);

        anotacao.setLabelOffset(50);
        anotacao.setPaint(new Color(0, 127, 14));
        anotacao.setFont(new Font("Tahoma", Font.BOLD, 12));
        plot.addAnnotation(anotacao);
        plot.addDomainMarker(intervalo, org.jfree.ui.Layer.BACKGROUND);
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        plot.setRenderer(renderer);
        pnGrafico.removeAll(); //removi todos os componentes que podem estar no meu painel
        pnGrafico.add(myChartPanel);
        pnGrafico.revalidate(); // revalidei meu painel, para que ele se atualize
        pnGrafico.repaint();

    }

    public void gerarGraficoMaisAptos(String x, int geracao) throws IOException {
        // cria o conjunto de dados
        XYSeries pontos = new XYSeries("Pontos");

        for (int i = 0; i < geracao; i++) {
            pontos.add(Double.parseDouble(tblMaisAptos.getValueAt(i, 0).toString()), Double.parseDouble(tblMaisAptos.getValueAt(i, 5).toString()));
        }

        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(pontos);

        JFreeChart grafico = ChartFactory.createXYLineChart(
                "Mais Aptos", // Título
                "Geração", // Etiqueta Coordenada X
                "Aptidão", // Etiqueta Coordenada Y
                dataset, // Datos
                PlotOrientation.VERTICAL,
                false, // Muestra la leyenda de los productos (Producto A)
                false,
                false
        );

        ChartPanel myChartPanel = new ChartPanel(grafico, true); //criei o painel de grafico colocando meu grafico previamente gerado
        myChartPanel.setSize(pnGraficoMaisAptos.getWidth(), pnGraficoMaisAptos.getHeight()); //setei o tamanho do grafico conforme o painel que usarei
        myChartPanel.setVisible(true);

        final XYPlot plot = grafico.getXYPlot();
        plot.setBackgroundPaint(new Color(250, 250, 250));
        plot.setRangeGridlinePaint(new Color(100, 100, 100));
        plot.setDomainGridlinePaint(new Color(250, 250, 250));

        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();

        renderer.setSeriesShapesVisible(0, false);
        NumberAxis range = (NumberAxis) plot.getRangeAxis();

        TickUnits ticks = new TickUnits();
        ticks.add(new NumberTickUnit(0));
        ticks.add(new NumberTickUnit(100));
        range.setStandardTickUnits(ticks);
        range.setTickUnit(new NumberTickUnit(10));

        plot.setRenderer(renderer);
        pnGraficoMaisAptos.removeAll(); //removi todos os componentes que podem estar no meu painel
        pnGraficoMaisAptos.add(myChartPanel);
        pnGraficoMaisAptos.revalidate(); // revalidei meu painel, para que ele se atualize
        pnGraficoMaisAptos.repaint();

    }

}
